set(PACKAGE_VERSION "@baseclasses_VERSION@")
set(PACKAGE_VERSION_MAJOR "@baseclasses_VERSION_MAJOR@")
set(PACKAGE_VERSION_MINOR "@baseclasses_VERSION_MINOR@")
set(PACKAGE_VERSION_PATCH "@baseclasses_VERSION_PATCH@")

if(baseclasses_DEBUG)
  message(STATUS "Debug mode on")
  message(STATUS "Installed baseclasses_VERSION: @baseclasses_VERSION@")

  message(STATUS "Installed baseclasses_BUILD_ARCHITECTURES: @baseclasses_BUILD_ARCHITECTURES@")
  message(STATUS "Configured baseclasses_BUILD_ARCHITECTURES: ${baseclasses_BUILD_ARCHITECTURES}")

  message(STATUS "Installed CMAKE_SIZEOF_VOID_P: @CMAKE_SIZEOF_VOID_P@")
  message(STATUS "Configured CMAKE_SIZEOF_VOID_P: ${CMAKE_SIZEOF_VOID_P}")
endif()

# If the customer has an override architecture requirement, use that
if(DEFINED baseclasses_ARCHITECTURE)
  foreach(i IN LISTS baseclasses_ARCHITECTURE)
    string(REGEX MATCH "amd64|x86_64|x64" baseclasses_is_x64 ${i})
    string(REGEX MATCH "i386|x86" baseclasses_is_x86 ${i})
    string(REGEX MATCH "arm" baseclasses_is_arm ${i})

    # Classify
    if(baseclasses_is_x86)
      list(APPEND baseclasses_ARCHITECTURES x86)
    elseif(baseclasses_is_x64)
      list(APPEND baseclasses_ARCHITECTURES x64)
    elseif(baseclasses_is_arm)
      list(APPEND baseclasses_ARCHITECTURES arm)
    else()
      message(WARNING "Unrecognized architecture ${i}")
    endif()
  endforeach()
else()
  # Try to infer what the user wants
  if(CMAKE_SIZEOF_VOID_P EQUAL "8")
    set(baseclasses_ARCHITECTURES x64)
  else()
    set(baseclasses_ARCHITECTURES x86)
  endif()
endif()

if(baseclasses_DEBUG)
  message(STATUS "baseclasses_ARCHITECTURE: ${baseclasses_ARCHITECTURE}")
  message(STATUS "baseclasses_ARCHITECTURES: ${baseclasses_ARCHITECTURES}")
endif()

# Architectures we were built with
set(baseclasses_BUILD_ARCHITECTURES @baseclasses_BUILD_ARCHITECTURES@)
if(baseclasses_DEBUG)
  message(STATUS "baseclasses_BUILD_ARCHITECTURES: ${baseclasses_BUILD_ARCHITECTURES}")
endif()

# Verify that we match all of the architectures requested by the customer
foreach(i IN LISTS baseclasses_ARCHITECTURES)
  list(FIND baseclasses_BUILD_ARCHITECTURES ${i} found)
  if(found EQUAL -1)
    set(PACKAGE_VERSION_COMPATIBLE FALSE)
    set(PACKAGE_VERSION_UNSUITABLE TRUE)
    if(baseclasses_DEBUG)
      message(STATUS "Requested architecture of ${baseclasses_ARCHITECTURE} not compatible with @baseclasses_BUILD_ARCHITECTURES@")
    endif()
    return()
  endif()
endforeach()

if(PACKAGE_VERSION VERSION_LESS PACKAGE_FIND_VERSION)
  if(baseclasses_DEBUG)
    message(STATUS "Our version is less than the requested one, trivially incompatible")
  endif()
  set(PACKAGE_VERSION_COMPATIBLE FALSE)
elseif(NOT PACKAGE_FIND_VERSION_MINOR EQUAL PACKAGE_VERSION_MINOR)
  if(baseclasses_DEBUG)
    message(STATUS "Minor version mismatch, requested minor is ${PACKAGE_FIND_VERSION_MINOR}, this version is ${PACKAGE_VERSION_MINOR}")
  endif()
  set(PACKAGE_VERSION_COMPATIBLE FALSE)
elseif(NOT PACKAGE_FIND_VERSION_MAJOR EQUAL PACKAGE_VERSION_MAJOR)
  if(baseclasses_DEBUG)
    message(STATUS "Major version mismatch, failure.")
  endif()
  set(PACKAGE_VERSION_COMPATIBLE FALSE)
else()
  set(PACKAGE_VERSION_COMPATIBLE TRUE)
  if (PACKAGE_VERSION VERSION_EQUAL PACKAGE_FIND_VERSION)
    set(PACKAGE_VERSION_EXACT TRUE)
  endif()
  
  if(baseclasses_DEBUG)
    message(STATUS "Using baseclasses in ${CMAKE_CURRENT_SOURCE_DIR}")
  endif()
endif()
